<<<<<<< HEAD
#     cat("Name of column coding for ",coord," coord of signal #", sgn, ": ", sep="")
#     names_sgn_temp <- c(names_sgn_temp, readline())
#   }
#   sgnCols[[sgn]] <- names_sgn_temp
#   rm(names_sgn_temp)
# }
#
# # cleanup
# rm(sgn)
# rm(coord)
#
# reqCols <- c("subjName", "frameN", "frameT", "time", "signalOccluded")
# reqCols_check <- NULL
# for(rCol in reqCols)
# {
#   cat("Is ",rCol," column present? YES: type its name / NO: type 0 (zero):", sep="")
#   reqCols_check <- c(reqCols_check, readline())
# }
#
# # create working dataset
# wdataset <- dataset[names(dataset)%in%c(trialCol, unlist(sgnCols))]
indCols <- c("indexXraw","indexYraw","indexZraw")
thuCols <- c("thumbXraw","thumbYraw","thumbZraw")
if(!all(c(is.element("trialN", names(dataset)), is.element(indCols, names(dataset)))) ||
!all(c(is.element("trialN", names(dataset)), is.element(thuCols, names(dataset)))))
{
stop("data.check expected a column called 'trialN' and at least one of the following triples: \n
indexXraw, indexYraw, indexZraw \n         thumbXraw, thumbYraw, thumbZraw \n
but could not find them in the dataset \n")
} else
{
# assign refreshRate & time.unit to global environment for looping inside ddply (temporary)
assign("refreshRate", refreshRate, envir = .GlobalEnv)
assign("time.unit", time.unit, envir = .GlobalEnv)
reqCols <- c("subjName", "frameN", "time", "fingersOccluded",
"framesOccluded","frameT")
missingCols <- reqCols[!reqCols %in% names(dataset)]
if (length(missingCols) > 0) {
cat("The following columns do not exist:\n")
cat(missingCols, sep = ", ")
cat("\n\nFixing...\n\n")
# Fix subjName
if ("subjName" %in% missingCols) {
cat("Please type subject name:\n")
dataset$subjName <- readline()
cat("subjName added.\n")
}
# Fix frameN
if ("frameN" %in% missingCols) {
dataset <- kin.frameN(dataset)
cat("frameN added.\n")
}
# Fix frameT
if ("frameT" %in% missingCols) {
# if time does not exists, create frameT
if("time" %in% missingCols){
dataset <- ddply(dataset, .(trialN), mutate,
frameT = time.unit / refreshRate)
} else {
# else frameT is delta time
dataset <- ddply(dataset, .(trialN), mutate,
frameT = c(NA, diff(time)))
}
cat("frameT added.\n")
}
# Fix time
if ("time" %in% missingCols) {
dataset <- kin.time(dataset, refreshRate, time.unit)
cat("time added.\n")
}
# Flag missing data
if ("fingersOccluded" %in% missingCols) {
dataset <- kin.fingersOccluded(dataset)
cat("fingersOccluded added.\n")
}
# Flag frames with missing data
if ("framesOccluded" %in% missingCols) {
dataset <- kin.framesOccluded(dataset)
cat("framesOccluded added.\n")
}
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("fingersOccluded does not look right: fixing...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("framesOccluded does not look right: fixing...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase fixed successfully.")
}
else {
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("checking 'fingersOccluded' column ...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("checking 'framesOccluded' column ...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase looks good.")
}
# remove refreshRate & time.unit from global environment
# remove(refreshRate, envir = .GlobalEnv)
remove(time.unit, envir = .GlobalEnv)
return(dataset)
}
}
rtgChecked <- data.check(rtgData_bad) # subjName is missing. When asked to type the subject name, run the next line as is (no quotes)
library(kinesis)
rtgChecked <- data.check(rtgData_bad) # subjName is missing. When asked to type the subject name, run the next line as is (no quotes)
library(kinesis)
dataset <- rtgData
data.check <- function(dataset, refreshRate = 85, time.unit = 1000, ...)
{
# cat("Please input the name of the column coding for the trials:")
# trialCol <- readline()
#
# cat("Number of signals present in the dataset:")
# n_sgn <- as.numeric(as.character(readline()))
#
# sgnCols <- NULL
# for(sgn in 1:n_sgn)
# {
#   names_sgn_temp <- NULL
#   for(coord in c("x","y","z")){
#     cat("Name of column coding for ",coord," coord of signal #", sgn, ": ", sep="")
#     names_sgn_temp <- c(names_sgn_temp, readline())
#   }
#   sgnCols[[sgn]] <- names_sgn_temp
#   rm(names_sgn_temp)
# }
#
# # cleanup
# rm(sgn)
# rm(coord)
#
# reqCols <- c("subjName", "frameN", "frameT", "time", "signalOccluded")
# reqCols_check <- NULL
# for(rCol in reqCols)
# {
#   cat("Is ",rCol," column present? YES: type its name / NO: type 0 (zero):", sep="")
#   reqCols_check <- c(reqCols_check, readline())
# }
#
# # create working dataset
# wdataset <- dataset[names(dataset)%in%c(trialCol, unlist(sgnCols))]
indCols <- c("indexXraw","indexYraw","indexZraw")
thuCols <- c("thumbXraw","thumbYraw","thumbZraw")
if(!all(c(is.element("trialN", names(dataset)), is.element(indCols, names(dataset)))) ||
!all(c(is.element("trialN", names(dataset)), is.element(thuCols, names(dataset)))))
{
stop("data.check expected a column called 'trialN' and at least one of the following triples: \n
indexXraw, indexYraw, indexZraw \n         thumbXraw, thumbYraw, thumbZraw \n
but could not find them in the dataset \n")
} else
{
# assign refreshRate & time.unit to global environment for looping inside ddply (temporary)
assign("refreshRate", refreshRate, envir = .GlobalEnv)
assign("time.unit", time.unit, envir = .GlobalEnv)
reqCols <- c("subjName", "frameN", "time", "fingersOccluded",
"framesOccluded","frameT")
missingCols <- reqCols[!reqCols %in% names(dataset)]
if (length(missingCols) > 0) {
cat("The following columns do not exist:\n")
cat(missingCols, sep = ", ")
cat("\n\nFixing...\n\n")
# Fix subjName
if ("subjName" %in% missingCols) {
cat("Please type subject name:\n")
dataset$subjName <- readline()
cat("subjName added.\n")
}
# Fix frameN
if ("frameN" %in% missingCols) {
dataset <- kin.frameN(dataset)
cat("frameN added.\n")
}
# Fix frameT
if ("frameT" %in% missingCols) {
# if time does not exists, create frameT
if("time" %in% missingCols){
dataset <- ddply(dataset, .(trialN), mutate,
frameT = time.unit / refreshRate)
} else {
# else frameT is delta time
dataset <- ddply(dataset, .(trialN), mutate,
frameT = c(NA, diff(time)))
}
cat("frameT added.\n")
}
# Fix time
if ("time" %in% missingCols) {
dataset <- kin.time(dataset, refreshRate, time.unit)
cat("time added.\n")
}
# Flag missing data
if ("fingersOccluded" %in% missingCols) {
dataset <- kin.fingersOccluded(dataset)
cat("fingersOccluded added.\n")
}
# Flag frames with missing data
if ("framesOccluded" %in% missingCols) {
dataset <- kin.framesOccluded(dataset)
cat("framesOccluded added.\n")
}
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("fingersOccluded does not look right: fixing...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("framesOccluded does not look right: fixing...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase fixed successfully.")
}
else {
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("checking 'fingersOccluded' column ...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("checking 'framesOccluded' column ...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase looks good.")
}
# remove refreshRate & time.unit from global environment
# remove(refreshRate, envir = .GlobalEnv)
remove(time.unit, envir = .GlobalEnv)
return(dataset)
}
}
dataset <- rtgData
data.check <- function(dataset, refreshRate = 85, time.unit = 1000, ...)
{
# cat("Please input the name of the column coding for the trials:")
# trialCol <- readline()
#
# cat("Number of signals present in the dataset:")
# n_sgn <- as.numeric(as.character(readline()))
#
# sgnCols <- NULL
# for(sgn in 1:n_sgn)
# {
#   names_sgn_temp <- NULL
#   for(coord in c("x","y","z")){
#     cat("Name of column coding for ",coord," coord of signal #", sgn, ": ", sep="")
#     names_sgn_temp <- c(names_sgn_temp, readline())
#   }
#   sgnCols[[sgn]] <- names_sgn_temp
#   rm(names_sgn_temp)
# }
#
# # cleanup
# rm(sgn)
# rm(coord)
#
# reqCols <- c("subjName", "frameN", "frameT", "time", "signalOccluded")
# reqCols_check <- NULL
# for(rCol in reqCols)
# {
#   cat("Is ",rCol," column present? YES: type its name / NO: type 0 (zero):", sep="")
#   reqCols_check <- c(reqCols_check, readline())
# }
#
# # create working dataset
# wdataset <- dataset[names(dataset)%in%c(trialCol, unlist(sgnCols))]
indCols <- c("indexXraw","indexYraw","indexZraw")
thuCols <- c("thumbXraw","thumbYraw","thumbZraw")
if(!all(c(is.element("trialN", names(dataset)), is.element(indCols, names(dataset)))) ||
!all(c(is.element("trialN", names(dataset)), is.element(thuCols, names(dataset)))))
{
stop("data.check expected a column called 'trialN' and at least one of the following triples: \n
indexXraw, indexYraw, indexZraw \n         thumbXraw, thumbYraw, thumbZraw \n
but could not find them in the dataset \n")
} else
{
# assign refreshRate & time.unit to global environment for looping inside ddply (temporary)
assign("refreshRate", refreshRate, envir = .GlobalEnv)
assign("time.unit", time.unit, envir = .GlobalEnv)
reqCols <- c("subjName", "frameN", "time", "fingersOccluded",
"framesOccluded","frameT")
missingCols <- reqCols[!reqCols %in% names(dataset)]
if (length(missingCols) > 0) {
cat("The following columns do not exist:\n")
cat(missingCols, sep = ", ")
cat("\n\nFixing...\n\n")
# Fix subjName
if ("subjName" %in% missingCols) {
cat("Please type subject name:\n")
dataset$subjName <- readline()
cat("subjName added.\n")
}
# Fix frameN
if ("frameN" %in% missingCols) {
dataset <- kin.frameN(dataset)
cat("frameN added.\n")
}
# Fix frameT
if ("frameT" %in% missingCols) {
# if time does not exists, create frameT
if("time" %in% missingCols){
dataset <- ddply(dataset, .(trialN), mutate,
frameT = time.unit / refreshRate)
} else {
# else frameT is delta time
dataset <- ddply(dataset, .(trialN), mutate,
frameT = c(NA, diff(time)))
}
cat("frameT added.\n")
}
# Fix time
if ("time" %in% missingCols) {
dataset <- kin.time(dataset, refreshRate, time.unit)
cat("time added.\n")
}
# Flag missing data
if ("fingersOccluded" %in% missingCols) {
dataset <- kin.fingersOccluded(dataset)
cat("fingersOccluded added.\n")
}
# Flag frames with missing data
if ("framesOccluded" %in% missingCols) {
dataset <- kin.framesOccluded(dataset)
cat("framesOccluded added.\n")
}
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("fingersOccluded does not look right: fixing...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("framesOccluded does not look right: fixing...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase fixed successfully.")
}
else {
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("checking 'fingersOccluded' column ...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("checking 'framesOccluded' column ...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase looks good.")
}
# remove refreshRate & time.unit from global environment
remove(refreshRate, envir = .GlobalEnv)
remove(time.unit, envir = .GlobalEnv)
return(dataset)
}
}
rtgChecked <- data.check(rtgData_bad) # subjName is missing. When asked to type the subject name, run the next line as is (no quotes)
head(rtgChecked)
dataset <- rtgData
data.check <- function(dataset, refreshRate = 85, time.unit = 1, ...)
{
# cat("Please input the name of the column coding for the trials:")
# trialCol <- readline()
#
# cat("Number of signals present in the dataset:")
# n_sgn <- as.numeric(as.character(readline()))
#
# sgnCols <- NULL
# for(sgn in 1:n_sgn)
# {
#   names_sgn_temp <- NULL
#   for(coord in c("x","y","z")){
#     cat("Name of column coding for ",coord," coord of signal #", sgn, ": ", sep="")
#     names_sgn_temp <- c(names_sgn_temp, readline())
#   }
#   sgnCols[[sgn]] <- names_sgn_temp
#   rm(names_sgn_temp)
# }
#
# # cleanup
# rm(sgn)
# rm(coord)
#
# reqCols <- c("subjName", "frameN", "frameT", "time", "signalOccluded")
# reqCols_check <- NULL
# for(rCol in reqCols)
# {
#   cat("Is ",rCol," column present? YES: type its name / NO: type 0 (zero):", sep="")
#   reqCols_check <- c(reqCols_check, readline())
# }
#
# # create working dataset
# wdataset <- dataset[names(dataset)%in%c(trialCol, unlist(sgnCols))]
indCols <- c("indexXraw","indexYraw","indexZraw")
thuCols <- c("thumbXraw","thumbYraw","thumbZraw")
if(!all(c(is.element("trialN", names(dataset)), is.element(indCols, names(dataset)))) ||
!all(c(is.element("trialN", names(dataset)), is.element(thuCols, names(dataset)))))
{
stop("data.check expected a column called 'trialN' and at least one of the following triples: \n
indexXraw, indexYraw, indexZraw \n         thumbXraw, thumbYraw, thumbZraw \n
but could not find them in the dataset \n")
} else
{
# assign refreshRate & time.unit to global environment for looping inside ddply (temporary)
assign("refreshRate", refreshRate, envir = .GlobalEnv)
assign("time.unit", time.unit, envir = .GlobalEnv)
reqCols <- c("subjName", "frameN", "time", "fingersOccluded",
"framesOccluded","frameT")
missingCols <- reqCols[!reqCols %in% names(dataset)]
if (length(missingCols) > 0) {
cat("The following columns do not exist:\n")
cat(missingCols, sep = ", ")
cat("\n\nFixing...\n\n")
# Fix subjName
if ("subjName" %in% missingCols) {
cat("Please type subject name:\n")
dataset$subjName <- readline()
cat("subjName added.\n")
}
# Fix frameN
if ("frameN" %in% missingCols) {
dataset <- kin.frameN(dataset)
cat("frameN added.\n")
}
# Fix frameT
if ("frameT" %in% missingCols) {
# if time does not exists, create frameT
if("time" %in% missingCols){
dataset <- ddply(dataset, .(trialN), mutate,
frameT = time.unit / refreshRate)
} else {
# else frameT is delta time
dataset <- ddply(dataset, .(trialN), mutate,
frameT = c(NA, diff(time)))
}
cat("frameT added.\n")
}
# Fix time
if ("time" %in% missingCols) {
dataset <- kin.time(dataset, refreshRate, time.unit)
cat("time added.\n")
}
# Flag missing data
if ("fingersOccluded" %in% missingCols) {
dataset <- kin.fingersOccluded(dataset)
cat("fingersOccluded added.\n")
}
# Flag frames with missing data
if ("framesOccluded" %in% missingCols) {
dataset <- kin.framesOccluded(dataset)
cat("framesOccluded added.\n")
}
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("fingersOccluded does not look right: fixing...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("framesOccluded does not look right: fixing...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase fixed successfully.")
}
else {
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("checking 'fingersOccluded' column ...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("checking 'framesOccluded' column ...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase looks good.")
}
# remove refreshRate & time.unit from global environment
remove(refreshRate, envir = .GlobalEnv)
remove(time.unit, envir = .GlobalEnv)
return(dataset)
}
}
rtgChecked <- data.check(rtgData_bad) # subjName is missing. When asked to type the subject name, run the next line as is (no quotes)
head(rtgChecked)
head(testData)
testData2 <- data.check(rtgData_bad[usefCols])
head(testData)
head(testData2)
usefCols <- c("trialN","indexXraw","indexYraw","indexZraw","thumbXraw","thumbYraw","thumbZraw")
testData <- data.check(rtgData_bad[usefCols])
any(testData$fingersOccluded==1) # YES
head(testData)
library(kinesis)
trial.na.frame
=======
(thetaS <- atan2(v[2], v[3]))*180/pi
v
(thetaS <- atan2(v[2], v[3]))
?rotate3d
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
asHomogeneous(v)
asEuclidean(v)
asEuclidean(asHomogeneous(v))
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[3], v[2]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[3], v[2]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 0 0 1
sqrt(2)
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[3], v[2]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[3], v[2]))
(v <- rgl::rotate3d(v, thetaS, 0, 1, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[3], v[2]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[3], v[2]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[3], v[2]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 1 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV)))
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 1 1
2 * sqrt(.707)
sqrt(.707^2 + .707^2)
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 1 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), sin(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 0 1
rotationMatrix(thetaV, 1,1,1)
v%*%rotationMatrix(thetaV, 1,1,1)
asHomogeneous(v)%*%rotationMatrix(thetaV, 1,1,1)
asHomogeneous(v)%*%rotationMatrix(-thetaV, 1,1,1)
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), sin(thetaV))) # -.707 .707 .707
rotationMatrix(rep(thetaV, 3), 1,1,1)
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), sin(thetaV))) # -.707 .707 .707
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- c(cos(thetaV), sin(thetaV), sin(thetaV))) # -.707 .707 .707
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1])-pi/2)
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1]))
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 0 1
sqrt(3*.707^2)
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1]))
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1]))
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, -thetaS, 1, 0, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1]))
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 1 0 .707
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1]))
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 1 0 .707
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 0 1
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1]))
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 0 1 -.707
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 1 0 .707
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 0 1.22
(thetaV <- 3* pi/4)
(v <- c(cos(thetaV), sin(thetaV), cos(thetaV))) # -.707 .707 -.707
(thetaF <- atan2(v[2], v[1]))
(v <- rgl::rotate3d(v, thetaF, 0, 0, 1)) # 1 0 -.707
(thetaT <- atan2(v[1], v[3]))
(v <- rgl::rotate3d(v, thetaT, 0, 1, 0)) # 0 0 1.22
(thetaS <- atan2(v[2], v[3]))
(v <- rgl::rotate3d(v, thetaS, 1, 0, 0)) # 1 0 .707
library(kinesis)
indData <- indData.backup - transData[rep(1, nrow(indData.backup)),]
thuData <- thuData.backup - transData[rep(1, nrow(thuData.backup)),]
# end coordinates of the whole grasp
end <- as.numeric(km.res[km.res$moment=="end",1:3] - km.res[km.res$moment=="start",1:3]) # centered end coordinates
# rotate trajectories
indData <- kin.rotate.trajectory(indData, end)
thuData <- kin.rotate.trajectory(thuData, end)
# polish rotated dataset
indData <- as.data.frame(indData)
names(indData) <- c("indexX","indexY","indexZ")
thuData <- as.data.frame(thuData)
names(thuData) <- c("thumbX","thumbY","thumbZ")
plot3d(rotData[c(1,3,2)])
points3d(indData[c(1,3,2)], col="red")
points3d(thuData[c(1,3,2)], col="blue")
points3d(indData[c(1,3,2)], col="red")
indData <- indData.backup - transData[rep(1, nrow(indData.backup)),]
thuData <- thuData.backup - transData[rep(1, nrow(thuData.backup)),]
end <- as.numeric(km.res[km.res$moment=="end",1:3] - km.res[km.res$moment=="start",1:3]) # centered end coordinates
indData <- kin.rotate.trajectory(indData, end)
thuData <- kin.rotate.trajectory(thuData, end)
library(kinesis)
indData <- indData.backup - transData[rep(1, nrow(indData.backup)),]
thuData <- thuData.backup - transData[rep(1, nrow(thuData.backup)),]
end <- as.numeric(km.res[km.res$moment=="end",1:3] - km.res[km.res$moment=="start",1:3]) # centered end coordinates
indData <- kin.rotate.trajectory(indData, end)
thuData <- kin.rotate.trajectory(thuData, end)
indData <- as.data.frame(indData)
names(indData) <- c("indexX","indexY","indexZ")
thuData <- as.data.frame(thuData)
names(thuData) <- c("thumbX","thumbY","thumbZ")
plot3d(rotData[c(1,3,2)])
points3d(indData[c(1,3,2)], col="red")
points3d(thuData[c(1,3,2)], col="blue")
library(kinesis)
options(scipen = 1, digits = 3)
libraries()
library(cowplot)
# PROCEDURE FROM GALLIVAN and CHAPMAN 2014
#### Prepare the dataset ####
# keep only useful columns
usefCols <- c("trialN","indexXraw","indexYraw","indexZraw","thumbXraw","thumbYraw","thumbZraw")
# Fix dataset
testData <- data.check(rtgData_bad[usefCols])
test
# is there missing data for each digit in this dataset?
any(testData$fingersOccluded==1) # YES
#### 1. individual trial analysis ####
###  1.1 extract ROI ----
##   1.1.1 fill in missing frames ----
# inpaint_nans function in matlab
# select one trial with missing frames
# flag trials with missing frames
testData <- ddply(testData, .(trialN), mutate,
missing.frames = any(framesOccluded > 0))
# extract these trials number
trial.na.frame <- unique(subset(testData, missing.frames)$trialN)
# pick a random bad trial
badTrialNum <- 40
testTrial <- subset(testData, trialN == badTrialNum)
# plot the data
ggplot(aes(frameN, thumbXraw, color = fingersOccluded), data = testTrial) + geom_point() # thumb data is bad
ggplot(aes(frameN, indexXraw, color = fingersOccluded), data = testTrial) + geom_point() # index data is OK
library(kinesis)
options(scipen = 1, digits = 3)
libraries()
library(cowplot)
# PROCEDURE FROM GALLIVAN and CHAPMAN 2014
#### Prepare the dataset ####
# keep only useful columns
usefCols <- c("trialN","indexXraw","indexYraw","indexZraw","thumbXraw","thumbYraw","thumbZraw")
# Fix dataset
testData <- data.check(rtgData_bad[usefCols])
# is there missing data for each digit in this dataset?
any(testData$fingersOccluded==1) # YES
#### 1. individual trial analysis ####
###  1.1 extract ROI ----
##   1.1.1 fill in missing frames ----
# inpaint_nans function in matlab
# select one trial with missing frames
# flag trials with missing frames
testData <- ddply(testData, .(trialN), mutate,
missing.frames = any(framesOccluded > 0))
# extract these trials number
trial.na.frame <- unique(subset(testData, missing.frames)$trialN)
# pick a random bad trial
badTrialNum <- 40
testTrial <- subset(testData, trialN == badTrialNum)
# plot the data
ggplot(aes(frameN, thumbXraw, color = fingersOccluded), data = testTrial) + geom_point() # thumb data is bad
ggplot(aes(frameN, indexXraw, color = fingersOccluded), data = testTrial) + geom_point() # index data is OK
5e-6
5e-06
library(kinesis)
10e-18
1e-18
# repair missing frames
testTrial$indexXrep <- with(testTrial, kin.smooth.repair(time,indexXraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$indexYrep <- with(testTrial, kin.smooth.repair(time,indexYraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$indexZrep <- with(testTrial, kin.smooth.repair(time,indexZraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$thumbXrep <- with(testTrial, kin.smooth.repair(time,thumbXraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$thumbYrep <- with(testTrial, kin.smooth.repair(time,thumbYraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$thumbZrep <- with(testTrial, kin.smooth.repair(time,thumbZraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
ggplot(aes(frameN, thumbXrep, color = fingersOccluded), data = testTrial) + geom_point() # thumb data is bad
cumsum(rep(1, 10))
cumsum(c(rep(0,10), rep(1, 10), rep(0,10)))
cumsum(c(rep(0,10), rep(1, 10), rep(0,10), rep(1, 10), rep(0,10)))
cumsum(c(rep(NA,10), rep(1, 10), rep(NA,10), rep(1, 10), rep(NA,10)))
v <- c(rep(0,10), rep(1, 10), rep(0,10), rep(1, 10), rep(0,10))
v*unlist(lapply(rle(fingersOccluded)$lengths, seq_len))
v*unlist(lapply(rle(v)$lengths, seq_len))
testTrial$thumbXraw
testData <- data.check(rtgData_bad[usefCols])
any(testData$fingersOccluded==1) # YES
rtgData_bad$thumbXraw
testTrial$thumbXraw
rtgData_bad$thumbXraw
rtgData_bad$thumbXraw
testTrial$thumbXraw
subset(rtgData_bad, trialN==40)$thumbXraw
testTrial$thumbXraw
subset(rtgData_bad, trialN==40)$thumbXraw
subset(rtgData_bad, trialN==40)$thumbXraw
v <- subset(rtgData_bad, trialN==40)$thumbXraw
plot(v)
ifelse(v == criterion, NA, ifelse(diff(v) < .000001, NA, v))
criterion <- 999
ifelse(v == criterion, NA, ifelse(diff(v) < .000001, NA, v))
testTrial$thumbXraw
ifelse(v == criterion, NA, ifelse(c(NA, diff(v)) < .000001, NA, v))
testTrial$thumbXraw
v.diff <- c(NA, diff(v))
v.diff
ifelse(v == criterion, NA, ifelse(abs(c(NA, diff(v))) < .000001, NA, v))
ifelse(v[-1] == criterion, NA, ifelse(abs(c(NA, diff(v))) < .000001, NA, v[-1]))
ifelse(v == criterion, NA, ifelse(abs(c(NA, diff(v))) < .000001, NA, v))
ifelse(abs(c(NA, diff(v))) < .000001, NA, ifelse(v == criterion, NA))
ifelse(abs(c(NA, diff(v))) < .000001, NA, ifelse(v == criterion, NA, v))
kin.missing.frames <- function(v) {c(v[1], ifelse(abs(c(NA, diff(v))) < .000001, NA, ifelse(v == criterion, NA, v))[-1])}
v
kin.missing.frames(v)
criterion <- c(275.31, 999)
kin.missing.frames <- function(v) {c(v[1], ifelse(abs(c(NA, diff(v))) < .000001, NA, ifelse(v %in% criterion, NA, v))[-1])}
kin.missing.frames(v)
v %in% criterion
kin.missing.frames(v)
criterion <- c(276.28, 999)
kin.missing.frames <- function(v) {c(v[1], ifelse(abs(c(NA, diff(v))) < .000001, NA, ifelse(v %in% criterion, NA, v))[-1])}
criterion <- c(998, 999)
v[1] <- 998
kin.missing.frames <- function(v) {c(v[1], ifelse(abs(c(NA, diff(v))) < .000001, NA, ifelse(v %in% criterion, NA, v))[-1])}
kin.missing.frames(v)
v %in% criterion
kin.missing.frames <- function(v) {v[v%in%criterion] <- NA; c(v[1], ifelse(abs(c(NA, diff(v))) < .000001, NA, v))[-1]}
kin.missing.frames(v)
length(kin.missing.frames(v))
length(v)
kin.missing.frames <- function(v) {c(v[1], ifelse(abs(c(NA, diff(v))) < .000001, NA, v))[-1]; v[v%in%criterion] <- NA}
kin.missing.frames(v)
kin.missing.frames(v)
kin.missing.frames <- function(v) {c(v[1], ifelse(abs(c(NA, diff(v))) < .000001, NA, v))[-1]; v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
v
kin.missing.frames <- function(x) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x))[-1]; x[x%in%criterion] <- NA; return(x)}
kin.missing.frames(v)
kin.missing.frames <- function(x) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x))[-1]; v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
criterion <- c(998, 999, 281.9)
kin.missing.frames(v)
criterion <- c(998, 999, 281.90)
kin.missing.frames(v)
v[v%in%criterion]
criterion <- c(998, 999, 281.90)
kin.missing.frames(v)
v[v%in%criterion]
v%in%criterion
criterion
criterion <- c(998, 999, 281.90)
criterion
criterion <- c(998.0, 999.0, 281.90)
kin.missing.frames <- function(x) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x))[-1]; v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
criterion
options(scipen = 999, digits = 3)
criterion
criterion <- c(998, 999, 281.90)
criterion
devtools::document()
library(kinesis)
libraries()
library(cowplot)
# PROCEDURE FROM GALLIVAN and CHAPMAN 2014
#### Prepare the dataset ####
# keep only useful columns
usefCols <- c("trialN","indexXraw","indexYraw","indexZraw","thumbXraw","thumbYraw","thumbZraw")
# Fix dataset
testData <- data.check(rtgData_bad[usefCols])
# is there missing data for each digit in this dataset?
any(testData$fingersOccluded==1) # YES
#### 1. individual trial analysis ####
###  1.1 extract ROI ----
##   1.1.1 fill in missing frames ----
# inpaint_nans function in matlab
# select one trial with missing frames
# flag trials with missing frames
testData <- ddply(testData, .(trialN), mutate,
missing.frames = any(framesOccluded > 0))
# extract these trials number
trial.na.frame <- unique(subset(testData, missing.frames)$trialN)
# pick a random bad trial
badTrialNum <- 40
testTrial <- subset(testData, trialN == badTrialNum)
# plot the data
ggplot(aes(frameN, thumbXraw), data = testTrial) + geom_point() # thumb data is bad
# how many bad frame are there?
max(testTrial$framesOccluded) # 15
# repair missing frames
testTrial$indexXrep <- with(testTrial, kin.smooth.repair(time,indexXraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$indexYrep <- with(testTrial, kin.smooth.repair(time,indexYraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$indexZrep <- with(testTrial, kin.smooth.repair(time,indexZraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$thumbXrep <- with(testTrial, kin.smooth.repair(time,thumbXraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$thumbYrep <- with(testTrial, kin.smooth.repair(time,thumbYraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$thumbZrep <- with(testTrial, kin.smooth.repair(time,thumbZraw, maxFrames= 20, fingersOccluded=fingersOccluded, framesOccluded=framesOccluded))
testTrial$thumbXraw
v <- subset(rtgData_bad, trialN==40)$thumbXraw
plot(v)
criterion <- c(998, 999, 281.90)
criterion
v[1] <- 998
kin.missing.frames <- function(x) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x))[-1]; v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
criterion <- c(998, 999, 281.903315)
kin.missing.frames(v)
v <- subset(rtgData_bad, trialN==40)$thumbXraw
criterion <- c(999)
kin.missing.frames(v)
options(scipen = 1, digits = 3)
kin.missing.frames(v)
v <- subset(rtgData_bad, trialN==40)$thumbXraw
criterion <- c(999)
kin.missing.frames(v)
kin.missing.frames <- function(x) {v <- c(x[1], ifelse(abs(diff(x)) < .000001, NA, x))[-1]; v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
kin.missing.frames <- function(x) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x))[-1]; v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
kin.missing.frames <- function(x) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x)); v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
length(kin.missing.frames(v))
kin.missing.frames <- function(x) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x)[-1]); v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
length(kin.missing.frames(v))
length(v)
kin.missing.frames(v)
kin.missing.frames <- function(x, criterion==NULL) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x)[-1]); v[v%in%criterion] <- NA; return(v)}
kin.missing.frames <- function(x, criterion=NULL) {v <- c(x[1], ifelse(abs(c(NA, diff(x))) < .000001, NA, x)[-1]); v[v%in%criterion] <- NA; return(v)}
kin.missing.frames(v)
library(kinesis)
kin.missing.frames(v)
library(kinesis)
devtools::document()
kin.signal.missing(v)
vm <- kin.signal.missing(v)
ifelse(is.na(vm), 1, 0)
vm.flag <- ifelse(is.na(vm), 1, 0)
unlist(lapply(rle(vm.flag)$lengths, seq_len))
vm.flag * unlist(lapply(rle(vm.flag)$lengths, seq_len))
vm.fit <- predict(sreg(time, vm))
time <- subset(rtgData_bad, trialN==40)$
kin.signal.repair(x, maxFrames = 18)
data.check(rtgData_bad[usefCols])
library(kinesis)
v <- subset(rtgData_bad, trialN==40)$thumbXraw
time <- subset(rtgData_bad, trialN==40)$
kin.signal.repair(x, maxFrames = 18)
time <- testTrial$time
vm.fit <- predict(sreg(time, vm))
vm.fit
frameN <- testTrial$frameN
vm.fit <- predict(sreg(time, vm))
vm.fit1 <- predict(sreg(frameN, vm))
plot(vm.fit, vm.fit1)
vm <- kin.signal.missing(v)
frames <- 1:length(vm)
vm.fit <- predict(sreg(frames, vm))
vm.flag <- ifelse(is.na(vm), 1, 0)
vm.flag.count <- vm.flag * unlist(lapply(rle(vm.flag)$lengths, seq_len))
vm.fit <- predict(sreg(frames, vm)) * vm.flag.count
vm.flag.count
predict(sreg(frames, vm))
vm.fit
split(vm.flag, 0)
?split(vm.flag, 0)
base::split(vm.flag, 0)
base::split(vm.flag, c(0,1))
base::split(vm.flag, as.factor(c(0,1)))
base::split(as.factor(vm.flag), c(0,1))
base::split(vm.flag.count, 0)
Hmisc::cut2(v, 0)
Hmisc::cut2(v, c(0,1))
cut(v, c(0,1))
cut(seq_along(vm.flag.count), 0, labels = FALSE)
cut(seq_along(vm.flag.count), c(0,1), labels = FALSE)
cut(seq_along(vm.flag), c(0,1), labels = FALSE)
seq_along(vm.flag.count)
cut(seq_along(vm.flag.count), 2, labels = FALSE)
>>>>>>> 7cb5ac9cbcce535052812c5d728bbb924160745f
