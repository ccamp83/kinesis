hand.signal <- testTrial[,c("handXraw","handZraw")]
# analysis: repair, filter, translate, rotate ----
handData <- kin.signal.analysis(hand.signal, "hand", start, end, deltaTime = refreshRate, f = F)
#### merge back ----
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time","handXraw","handZraw")], handData)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.traj.landmark("trialData$handZvel > onsetVel_threshold")
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
#### offset time ----
# set velocity threshold ----
returnVel_threshold <- -.02
# find the frame where this happens
offsetFramePos <- kin.find.traj.landmark("trialData$handZvel < returnVel_threshold")
# crop
trialData <- subset(trialData, frameN < frameN[offsetFramePos])
# ggplot(aes(frameN, handZ), data = trialData) +
#   geom_point()
#### space normalization ----
# euclidean distance of hand to its final position
trialData$handDist <- sqrt((trialData$handX - tail(trialData$handX, 1))^2 +
(trialData$handY - tail(trialData$handY, 1))^2 +
(trialData$handZ - tail(trialData$handZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$handDistB <- with(trialData, cut(handDist, breaks = binN, labels = F))
#### append trajectory data to main trajectory dataset ----
trajData <- rbind(trajData, trialData)
#### extract parameters ----
extractData <- kin.extract.parameters(trialData, c("hand"), grasp = F)
#### append reach parameters to main dataset ----
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset ----
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
# tN <- trialsList[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial ----
testTrial.backup <- subset(testData, trialN == tN)
columnsToExclude <- paste0("hand",c("X","Y","Z"),"raw")
testTrial <- testTrial.backup[, !names(testTrial.backup)%in%columnsToExclude]
testTrial$handXraw <- testTrial$handX
testTrial$handZraw <- testTrial$handZ
#### signals analysis ----
# set start x y z coordinates ----
start <- c(0,0,0)
# set end (depends on trial's conditions) ----
end <- c(0,0,.1)
# refresh rate ----
refreshRate <- 1/85
# prepare signals datasets
hand.signal <- testTrial[,c("handXraw","handZraw")]
# analysis: repair, filter, translate, rotate ----
handData <- kin.signal.analysis(hand.signal, "hand", start, end, deltaTime = refreshRate, f = F)
#### merge back ----
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time","handXraw","handZraw")], handData)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.traj.landmark("trialData$handZvel > onsetVel_threshold")
library(kinesis)
# find onset frame ----
onsetFramePos <- kin.find.traj.landmark("trialData$handZvel > onsetVel_threshold")
onsetFramePos
tN <- trialsList[1]
# tN <- trialsList[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial ----
testTrial.backup <- subset(testData, trialN == tN)
columnsToExclude <- paste0("hand",c("X","Y","Z"),"raw")
testTrial <- testTrial.backup[, !names(testTrial.backup)%in%columnsToExclude]
testTrial$handXraw <- testTrial$handX
testTrial$handZraw <- testTrial$handZ
#### signals analysis ----
# set start x y z coordinates ----
start <- c(0,0,0)
# set end (depends on trial's conditions) ----
end <- c(0,0,.1)
# refresh rate ----
refreshRate <- 1/85
# prepare signals datasets
hand.signal <- testTrial[,c("handXraw","handZraw")]
# analysis: repair, filter, translate, rotate ----
handData <- kin.signal.analysis(hand.signal, "hand", start, end, deltaTime = refreshRate, f = F)
#### merge back ----
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time","handXraw","handZraw")], handData)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.traj.landmark("trialData$handZvel > onsetVel_threshold")
onsetFramePos
library(kinesis)
#### main dataset
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
#### Analysis loop ####
trialsList <- unique(testData$trialN)
badTrials <- NULL
for(tN in trialsList)
{
# tN <- trialsList[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial ----
testTrial.backup <- subset(testData, trialN == tN)
columnsToExclude <- paste0("hand",c("X","Y","Z"),"raw")
testTrial <- testTrial.backup[, !names(testTrial.backup)%in%columnsToExclude]
testTrial$handXraw <- testTrial$handX
testTrial$handZraw <- testTrial$handZ
#### signals analysis ----
# set start x y z coordinates ----
start <- c(0,0,0)
# set end (depends on trial's conditions) ----
end <- c(0,0,.1)
# refresh rate ----
refreshRate <- 1/85
# prepare signals datasets
hand.signal <- testTrial[,c("handXraw","handZraw")]
# analysis: repair, filter, translate, rotate ----
handData <- kin.signal.analysis(hand.signal, "hand", start, end, deltaTime = refreshRate, f = F)
#### merge back ----
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time","handXraw","handZraw")], handData)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.traj.landmark("trialData$handZvel > onsetVel_threshold")
if(!is.na(onsetFramePos))
{
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
#### offset time ----
# set velocity threshold ----
returnVel_threshold <- -.02
# find the frame where this happens
offsetFramePos <- kin.find.traj.landmark("trialData$handZvel < returnVel_threshold")
if(!is.na(offsetFramePos))
{
# crop
trialData <- subset(trialData, frameN < frameN[offsetFramePos])
# ggplot(aes(frameN, handZ), data = trialData) +
#   geom_point()
#### space normalization ----
# euclidean distance of hand to its final position
trialData$handDist <- sqrt((trialData$handX - tail(trialData$handX, 1))^2 +
(trialData$handY - tail(trialData$handY, 1))^2 +
(trialData$handZ - tail(trialData$handZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$handDistB <- with(trialData, cut(handDist, breaks = binN, labels = F))
#### append trajectory data to main trajectory dataset ----
trajData <- rbind(trajData, trialData)
#### extract parameters ----
extractData <- kin.extract.parameters(trialData, c("hand"), grasp = F)
if(!is.na(extractData))
{
#### append reach parameters to main dataset ----
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset ----
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
} else
badTrials <- c(badTrials, tN)
} else
badTrials <- c(badTrials, tN)
} else
badTrials <- c(badTrials, tN)
}
head(reach_paramData)
head(timeinfoData)
badTrials
#### Results ####
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
coord_fixed()
median(trajData$handX)
median(trajData$handX[trajData$handZ < .05])
median(trajData$handX[trajData$handZ < .025])
median(trajData$handX[trajData$handZ < .015])
median(trajData$handX[trajData$handZ < .005])
median(trajData$handX[trajData$handZ < .0005])
#### Results ####
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = .007) +
coord_fixed()
#### Results ####
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.007) +
coord_fixed()
#### Results ####
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed()
install.packages("gganimate")
devtools::install_github('thomasp85/gganimate')
#### Results ####
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Year: {trialN}', x = 'handX', y = 'handZ') +
transition_time(trialN) +
ease_aes('linear')
#### Results ####
library(gganimate)
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Year: {trialN}', x = 'handX', y = 'handZ') +
transition_time(trialN) +
ease_aes('linear')
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
# labs(title = 'Year: {trialN}', x = 'handX', y = 'handZ') +
transition_time(trialN) +
ease_aes('linear')
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Year: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN) +
ease_aes('linear')
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Year: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN) +
ease_aes('linear')
?transition_time
?transition_states
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Year: {frame_time}', x = 'handX', y = 'handZ') +
transition_states(trialN,
transition_length = 2) +
ease_aes('linear')
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Year: {frame_time}', x = 'handX', y = 'handZ') +
transition_states(trialN,
transition_length = 2,
state_length = 1) +
ease_aes('linear')
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_states(trialN,
transition_length = 2,
state_length = 1) +
ease_aes('linear')
install.packages("plotly")
library(plotly)
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN) +
ease_aes('linear')
ggplot(data = trajData) +
geom_point(aes(handX, handZ, frame = trialN)) +
geom_vline(xintercept = -.006) +
coord_fixed()
trajPlots <- ggplot(data = trajData) +
geom_point(aes(handX, handZ, frame = trialN)) +
geom_vline(xintercept = -.006) +
coord_fixed()
ggplotly(trajPlots)
install.packages("gapminder")
library(gapminder)
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
p <- ggplotly(p)
p
p <- ggplotly(trajPlots)
p
trajPlots <- ggplot(data = subset(trajData, trialN<5)) +
geom_point(aes(handX, handZ, frame = frameN)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
facet_wrap(~ trialN)
p <- ggplotly(trajPlots)
p
trajPlots
p
trajPlots <- ggplot(data = subset(trajData, trialN==5)) +
geom_point(aes(handX, handZ, frame = frameN)) +
geom_vline(xintercept = -.006) +
coord_fixed()
p <- ggplotly(trajPlots)
p
p <- ggplotly(p)
p
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
p <- ggplotly(p)
p
trajPlots <- ggplot(data = subset(trajData, trialN==5), aes(handX, hand)) +
geom_point(aes(frame = frameN)) +
coord_fixed()
trajPlots
trajPlots <- ggplot(data = subset(trajData, trialN==5), aes(handX, handZ)) +
geom_point(aes(frame = frameN)) +
coord_fixed()
trajPlots
p <- ggplotly(trajPlots)
p
ggplot(data = subset(trajData, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
facet_wrap(~ trialN)
head(trajData)
ggplot(data = subset(trajData, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
facet_wrap(~ trialN) +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(frameN) +
ease_aes('linear')
?ease_aes
ggplot(data = subset(trajData, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
facet_wrap(~ trialN) +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(frameN) +
ease_aes('circular')
ggplot(data = subset(trajData, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
facet_wrap(~ trialN) +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(frameN) +
ease_aes('elastic')
ggplot(data = subset(trajData, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
facet_wrap(~ trialN) +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(frameN) +
ease_aes('sine')
ggplot(data = subset(trajData, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
facet_wrap(~ trialN) +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(frameN) +
ease_aes('sine-in-out')
ggplot(data = subset(trajData, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
facet_wrap(~ trialN) +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(frameN)
head(trajData)
trajDataB <- ddply(trajData, .(trialN, handDistB), summarise,
handX = mean(handX, na.rm=T),
handZ = mean(handZ, na.rm=T))
ggplot(data = subset(trajDataB, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed()
ggplot(data = subset(trajDataB, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN)
ggplot(data = subset(trajDataB, trialN<200)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN)
ggplot(data = subset(trajDataB, trialN<200)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN, range = 5)
?transition_time
ggplot(data = subset(trajDataB, trialN<200)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN, range = handDistB)
anim
anim <- ggplot(data = subset(trajDataB, trialN<200)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN)
animate(anim, fps = 5)
animate(anim, fps = 50)
animate(anim, fps = 2)
animate(anim, fps = 1)
anim <- ggplot(data = subset(trajDataB, trialN<5)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN)
animate(anim, fps = 1)
anim <- ggplot(data = subset(trajDataB, trialN<50)) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN)
animate(anim, duration = 10, fps = 5)
animate(anim, duration = 20, fps = 5)
anim <- ggplot(data = trajDataB) +
geom_point(aes(handX, handZ)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN)
animate(anim, duration = 60, fps = 5)
anim <- ggplot(data = trajDataB) +
geom_point(aes(handX, handZ, color = phase)) +
geom_vline(xintercept = -.006) +
coord_fixed() +
labs(title = 'Trial: {frame_time}', x = 'handX', y = 'handZ') +
transition_time(trialN)
animate(anim, duration = 60, fps = 5)
e/pi
exp
exp^1
1/6
3.142/6
pi/6
2*pi/6
pi/8
exp(1)
exp(1)/pi
pi/exp(1)
1/90
1/90*2
1/90*20
1/1000
install.packages("gganimate")
mu::libraries()
library(kinesis)
data("reachData")
head(reachData)
show(reachData)
?show
head(reachData)
# required columns
reqColumns <- c("trialN",
paste("signal",c("X","Y","Z"),"raw", sep = ""))
# optional columns
optColumns <- c("deltaTime","frameN","time")
testData3 <-
eval(substitute(
ddply(reachData, .(trialCol), summarise,
max(thumbXraw)),
list(trialCol = as.name(reqColumns[1]))
))
data("rtgData")
# required columns
reqColumns <- c("trialN",
paste("signal",c("X","Y","Z"),"raw", sep = ""))
# optional columns
optColumns <- c("deltaTime","frameN","time")
rtgData2 <-
eval(substitute(
ddply(rtgData, .(trialCol), summarise,
max(thumbXraw)),
list(trialCol = as.name(reqColumns[1]))
))
head(rtgData2)
source('P:/### CARLO ###/weight_monitor.R', echo=TRUE)
