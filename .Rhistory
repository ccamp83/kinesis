#     cat("Name of column coding for ",coord," coord of signal #", sgn, ": ", sep="")
#     names_sgn_temp <- c(names_sgn_temp, readline())
#   }
#   sgnCols[[sgn]] <- names_sgn_temp
#   rm(names_sgn_temp)
# }
#
# # cleanup
# rm(sgn)
# rm(coord)
#
# reqCols <- c("subjName", "frameN", "frameT", "time", "signalOccluded")
# reqCols_check <- NULL
# for(rCol in reqCols)
# {
#   cat("Is ",rCol," column present? YES: type its name / NO: type 0 (zero):", sep="")
#   reqCols_check <- c(reqCols_check, readline())
# }
#
# # create working dataset
# wdataset <- dataset[names(dataset)%in%c(trialCol, unlist(sgnCols))]
indCols <- c("indexXraw","indexYraw","indexZraw")
thuCols <- c("thumbXraw","thumbYraw","thumbZraw")
if(!all(c(is.element("trialN", names(dataset)), is.element(indCols, names(dataset)))) ||
!all(c(is.element("trialN", names(dataset)), is.element(thuCols, names(dataset)))))
{
stop("data.check expected a column called 'trialN' and at least one of the following triples: \n
indexXraw, indexYraw, indexZraw \n         thumbXraw, thumbYraw, thumbZraw \n
but could not find them in the dataset \n")
} else
{
# assign refreshRate & time.unit to global environment for looping inside ddply (temporary)
assign("refreshRate", refreshRate, envir = .GlobalEnv)
assign("time.unit", time.unit, envir = .GlobalEnv)
reqCols <- c("subjName", "frameN", "time", "fingersOccluded",
"framesOccluded","frameT")
missingCols <- reqCols[!reqCols %in% names(dataset)]
if (length(missingCols) > 0) {
cat("The following columns do not exist:\n")
cat(missingCols, sep = ", ")
cat("\n\nFixing...\n\n")
# Fix subjName
if ("subjName" %in% missingCols) {
cat("Please type subject name:\n")
dataset$subjName <- readline()
cat("subjName added.\n")
}
# Fix frameN
if ("frameN" %in% missingCols) {
dataset <- kin.frameN(dataset)
cat("frameN added.\n")
}
# Fix frameT
if ("frameT" %in% missingCols) {
# if time does not exists, create frameT
if("time" %in% missingCols){
dataset <- ddply(dataset, .(trialN), mutate,
frameT = time.unit / refreshRate)
} else {
# else frameT is delta time
dataset <- ddply(dataset, .(trialN), mutate,
frameT = c(NA, diff(time)))
}
cat("frameT added.\n")
}
# Fix time
if ("time" %in% missingCols) {
dataset <- kin.time(dataset, refreshRate, time.unit)
cat("time added.\n")
}
# Flag missing data
if ("fingersOccluded" %in% missingCols) {
dataset <- kin.fingersOccluded(dataset)
cat("fingersOccluded added.\n")
}
# Flag frames with missing data
if ("framesOccluded" %in% missingCols) {
dataset <- kin.framesOccluded(dataset)
cat("framesOccluded added.\n")
}
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("fingersOccluded does not look right: fixing...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("framesOccluded does not look right: fixing...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase fixed successfully.")
}
else {
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("checking 'fingersOccluded' column ...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("checking 'framesOccluded' column ...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase looks good.")
}
# remove refreshRate & time.unit from global environment
# remove(refreshRate, envir = .GlobalEnv)
remove(time.unit, envir = .GlobalEnv)
return(dataset)
}
}
rtgChecked <- data.check(rtgData_bad) # subjName is missing. When asked to type the subject name, run the next line as is (no quotes)
library(kinesis)
rtgChecked <- data.check(rtgData_bad) # subjName is missing. When asked to type the subject name, run the next line as is (no quotes)
library(kinesis)
dataset <- rtgData
data.check <- function(dataset, refreshRate = 85, time.unit = 1000, ...)
{
# cat("Please input the name of the column coding for the trials:")
# trialCol <- readline()
#
# cat("Number of signals present in the dataset:")
# n_sgn <- as.numeric(as.character(readline()))
#
# sgnCols <- NULL
# for(sgn in 1:n_sgn)
# {
#   names_sgn_temp <- NULL
#   for(coord in c("x","y","z")){
#     cat("Name of column coding for ",coord," coord of signal #", sgn, ": ", sep="")
#     names_sgn_temp <- c(names_sgn_temp, readline())
#   }
#   sgnCols[[sgn]] <- names_sgn_temp
#   rm(names_sgn_temp)
# }
#
# # cleanup
# rm(sgn)
# rm(coord)
#
# reqCols <- c("subjName", "frameN", "frameT", "time", "signalOccluded")
# reqCols_check <- NULL
# for(rCol in reqCols)
# {
#   cat("Is ",rCol," column present? YES: type its name / NO: type 0 (zero):", sep="")
#   reqCols_check <- c(reqCols_check, readline())
# }
#
# # create working dataset
# wdataset <- dataset[names(dataset)%in%c(trialCol, unlist(sgnCols))]
indCols <- c("indexXraw","indexYraw","indexZraw")
thuCols <- c("thumbXraw","thumbYraw","thumbZraw")
if(!all(c(is.element("trialN", names(dataset)), is.element(indCols, names(dataset)))) ||
!all(c(is.element("trialN", names(dataset)), is.element(thuCols, names(dataset)))))
{
stop("data.check expected a column called 'trialN' and at least one of the following triples: \n
indexXraw, indexYraw, indexZraw \n         thumbXraw, thumbYraw, thumbZraw \n
but could not find them in the dataset \n")
} else
{
# assign refreshRate & time.unit to global environment for looping inside ddply (temporary)
assign("refreshRate", refreshRate, envir = .GlobalEnv)
assign("time.unit", time.unit, envir = .GlobalEnv)
reqCols <- c("subjName", "frameN", "time", "fingersOccluded",
"framesOccluded","frameT")
missingCols <- reqCols[!reqCols %in% names(dataset)]
if (length(missingCols) > 0) {
cat("The following columns do not exist:\n")
cat(missingCols, sep = ", ")
cat("\n\nFixing...\n\n")
# Fix subjName
if ("subjName" %in% missingCols) {
cat("Please type subject name:\n")
dataset$subjName <- readline()
cat("subjName added.\n")
}
# Fix frameN
if ("frameN" %in% missingCols) {
dataset <- kin.frameN(dataset)
cat("frameN added.\n")
}
# Fix frameT
if ("frameT" %in% missingCols) {
# if time does not exists, create frameT
if("time" %in% missingCols){
dataset <- ddply(dataset, .(trialN), mutate,
frameT = time.unit / refreshRate)
} else {
# else frameT is delta time
dataset <- ddply(dataset, .(trialN), mutate,
frameT = c(NA, diff(time)))
}
cat("frameT added.\n")
}
# Fix time
if ("time" %in% missingCols) {
dataset <- kin.time(dataset, refreshRate, time.unit)
cat("time added.\n")
}
# Flag missing data
if ("fingersOccluded" %in% missingCols) {
dataset <- kin.fingersOccluded(dataset)
cat("fingersOccluded added.\n")
}
# Flag frames with missing data
if ("framesOccluded" %in% missingCols) {
dataset <- kin.framesOccluded(dataset)
cat("framesOccluded added.\n")
}
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("fingersOccluded does not look right: fixing...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("framesOccluded does not look right: fixing...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase fixed successfully.")
}
else {
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("checking 'fingersOccluded' column ...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("checking 'framesOccluded' column ...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase looks good.")
}
# remove refreshRate & time.unit from global environment
# remove(refreshRate, envir = .GlobalEnv)
remove(time.unit, envir = .GlobalEnv)
return(dataset)
}
}
dataset <- rtgData
data.check <- function(dataset, refreshRate = 85, time.unit = 1000, ...)
{
# cat("Please input the name of the column coding for the trials:")
# trialCol <- readline()
#
# cat("Number of signals present in the dataset:")
# n_sgn <- as.numeric(as.character(readline()))
#
# sgnCols <- NULL
# for(sgn in 1:n_sgn)
# {
#   names_sgn_temp <- NULL
#   for(coord in c("x","y","z")){
#     cat("Name of column coding for ",coord," coord of signal #", sgn, ": ", sep="")
#     names_sgn_temp <- c(names_sgn_temp, readline())
#   }
#   sgnCols[[sgn]] <- names_sgn_temp
#   rm(names_sgn_temp)
# }
#
# # cleanup
# rm(sgn)
# rm(coord)
#
# reqCols <- c("subjName", "frameN", "frameT", "time", "signalOccluded")
# reqCols_check <- NULL
# for(rCol in reqCols)
# {
#   cat("Is ",rCol," column present? YES: type its name / NO: type 0 (zero):", sep="")
#   reqCols_check <- c(reqCols_check, readline())
# }
#
# # create working dataset
# wdataset <- dataset[names(dataset)%in%c(trialCol, unlist(sgnCols))]
indCols <- c("indexXraw","indexYraw","indexZraw")
thuCols <- c("thumbXraw","thumbYraw","thumbZraw")
if(!all(c(is.element("trialN", names(dataset)), is.element(indCols, names(dataset)))) ||
!all(c(is.element("trialN", names(dataset)), is.element(thuCols, names(dataset)))))
{
stop("data.check expected a column called 'trialN' and at least one of the following triples: \n
indexXraw, indexYraw, indexZraw \n         thumbXraw, thumbYraw, thumbZraw \n
but could not find them in the dataset \n")
} else
{
# assign refreshRate & time.unit to global environment for looping inside ddply (temporary)
assign("refreshRate", refreshRate, envir = .GlobalEnv)
assign("time.unit", time.unit, envir = .GlobalEnv)
reqCols <- c("subjName", "frameN", "time", "fingersOccluded",
"framesOccluded","frameT")
missingCols <- reqCols[!reqCols %in% names(dataset)]
if (length(missingCols) > 0) {
cat("The following columns do not exist:\n")
cat(missingCols, sep = ", ")
cat("\n\nFixing...\n\n")
# Fix subjName
if ("subjName" %in% missingCols) {
cat("Please type subject name:\n")
dataset$subjName <- readline()
cat("subjName added.\n")
}
# Fix frameN
if ("frameN" %in% missingCols) {
dataset <- kin.frameN(dataset)
cat("frameN added.\n")
}
# Fix frameT
if ("frameT" %in% missingCols) {
# if time does not exists, create frameT
if("time" %in% missingCols){
dataset <- ddply(dataset, .(trialN), mutate,
frameT = time.unit / refreshRate)
} else {
# else frameT is delta time
dataset <- ddply(dataset, .(trialN), mutate,
frameT = c(NA, diff(time)))
}
cat("frameT added.\n")
}
# Fix time
if ("time" %in% missingCols) {
dataset <- kin.time(dataset, refreshRate, time.unit)
cat("time added.\n")
}
# Flag missing data
if ("fingersOccluded" %in% missingCols) {
dataset <- kin.fingersOccluded(dataset)
cat("fingersOccluded added.\n")
}
# Flag frames with missing data
if ("framesOccluded" %in% missingCols) {
dataset <- kin.framesOccluded(dataset)
cat("framesOccluded added.\n")
}
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("fingersOccluded does not look right: fixing...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("framesOccluded does not look right: fixing...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase fixed successfully.")
}
else {
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("checking 'fingersOccluded' column ...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("checking 'framesOccluded' column ...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase looks good.")
}
# remove refreshRate & time.unit from global environment
remove(refreshRate, envir = .GlobalEnv)
remove(time.unit, envir = .GlobalEnv)
return(dataset)
}
}
rtgChecked <- data.check(rtgData_bad) # subjName is missing. When asked to type the subject name, run the next line as is (no quotes)
head(rtgChecked)
dataset <- rtgData
data.check <- function(dataset, refreshRate = 85, time.unit = 1, ...)
{
# cat("Please input the name of the column coding for the trials:")
# trialCol <- readline()
#
# cat("Number of signals present in the dataset:")
# n_sgn <- as.numeric(as.character(readline()))
#
# sgnCols <- NULL
# for(sgn in 1:n_sgn)
# {
#   names_sgn_temp <- NULL
#   for(coord in c("x","y","z")){
#     cat("Name of column coding for ",coord," coord of signal #", sgn, ": ", sep="")
#     names_sgn_temp <- c(names_sgn_temp, readline())
#   }
#   sgnCols[[sgn]] <- names_sgn_temp
#   rm(names_sgn_temp)
# }
#
# # cleanup
# rm(sgn)
# rm(coord)
#
# reqCols <- c("subjName", "frameN", "frameT", "time", "signalOccluded")
# reqCols_check <- NULL
# for(rCol in reqCols)
# {
#   cat("Is ",rCol," column present? YES: type its name / NO: type 0 (zero):", sep="")
#   reqCols_check <- c(reqCols_check, readline())
# }
#
# # create working dataset
# wdataset <- dataset[names(dataset)%in%c(trialCol, unlist(sgnCols))]
indCols <- c("indexXraw","indexYraw","indexZraw")
thuCols <- c("thumbXraw","thumbYraw","thumbZraw")
if(!all(c(is.element("trialN", names(dataset)), is.element(indCols, names(dataset)))) ||
!all(c(is.element("trialN", names(dataset)), is.element(thuCols, names(dataset)))))
{
stop("data.check expected a column called 'trialN' and at least one of the following triples: \n
indexXraw, indexYraw, indexZraw \n         thumbXraw, thumbYraw, thumbZraw \n
but could not find them in the dataset \n")
} else
{
# assign refreshRate & time.unit to global environment for looping inside ddply (temporary)
assign("refreshRate", refreshRate, envir = .GlobalEnv)
assign("time.unit", time.unit, envir = .GlobalEnv)
reqCols <- c("subjName", "frameN", "time", "fingersOccluded",
"framesOccluded","frameT")
missingCols <- reqCols[!reqCols %in% names(dataset)]
if (length(missingCols) > 0) {
cat("The following columns do not exist:\n")
cat(missingCols, sep = ", ")
cat("\n\nFixing...\n\n")
# Fix subjName
if ("subjName" %in% missingCols) {
cat("Please type subject name:\n")
dataset$subjName <- readline()
cat("subjName added.\n")
}
# Fix frameN
if ("frameN" %in% missingCols) {
dataset <- kin.frameN(dataset)
cat("frameN added.\n")
}
# Fix frameT
if ("frameT" %in% missingCols) {
# if time does not exists, create frameT
if("time" %in% missingCols){
dataset <- ddply(dataset, .(trialN), mutate,
frameT = time.unit / refreshRate)
} else {
# else frameT is delta time
dataset <- ddply(dataset, .(trialN), mutate,
frameT = c(NA, diff(time)))
}
cat("frameT added.\n")
}
# Fix time
if ("time" %in% missingCols) {
dataset <- kin.time(dataset, refreshRate, time.unit)
cat("time added.\n")
}
# Flag missing data
if ("fingersOccluded" %in% missingCols) {
dataset <- kin.fingersOccluded(dataset)
cat("fingersOccluded added.\n")
}
# Flag frames with missing data
if ("framesOccluded" %in% missingCols) {
dataset <- kin.framesOccluded(dataset)
cat("framesOccluded added.\n")
}
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("fingersOccluded does not look right: fixing...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("framesOccluded does not look right: fixing...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase fixed successfully.")
}
else {
# Secondary check of missing data & frames (TODO fix this)
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] < 0)) {
cat("checking 'fingersOccluded' column ...\n")
dataset <- kin.fingersOccluded(dataset)
}
if(any(ddply(dataset, .(trialN), summarise,
any(as.logical(fingersOccluded)) - any(as.logical(framesOccluded)))[2] > 0)) {
cat("checking 'framesOccluded' column ...\n")
dataset <- kin.framesOccluded(dataset)
}
cat("\nDatabase looks good.")
}
# remove refreshRate & time.unit from global environment
remove(refreshRate, envir = .GlobalEnv)
remove(time.unit, envir = .GlobalEnv)
return(dataset)
}
}
rtgChecked <- data.check(rtgData_bad) # subjName is missing. When asked to type the subject name, run the next line as is (no quotes)
head(rtgChecked)
head(testData)
testData2 <- data.check(rtgData_bad[usefCols])
head(testData)
head(testData2)
usefCols <- c("trialN","indexXraw","indexYraw","indexZraw","thumbXraw","thumbYraw","thumbZraw")
testData <- data.check(rtgData_bad[usefCols])
any(testData$fingersOccluded==1) # YES
head(testData)
library(kinesis)
trial.na.frame
