simData
1:nrow(simData)
head(simData)
tr=1
simData[simData$trial==tr]$error <- with(simData[simData$trial==tr], e.targ_n(rot_n, rot.est))
simData[simData$trial==tr]
head(simData)
simData[simData$trial==tr,]
simData[simData$trial==tr,]$error
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
simData <- rbind(baseline, adaptation, washout)
simData
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
simData[simData$trial==tr,]
with(simData[simData$trial==tr,], e.targ_n(rot_n, rot.est))
simData[simData$trial==tr,]$error <- with(simData[simData$trial==tr,], e.targ_n(rot_n, rot.est))
simData[simData$trial==tr,]
with(simData[simData$trial==tr,], e.targ_n(rot_n, rot.est))
simData[simData$trial==tr,]$error
with(simData[simData$trial==tr,], e.targ_n(rot_n, rot.est))
simData[simData$trial==tr,]$error <- with(simData[simData$trial==tr,], e.targ_n(rot_n, rot.est))
with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
simData[simData$trial==tr,]$error <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
subset(simData, trial==tr)$error <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
subset(simData, trial==tr)
with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
simData[simData$trial==tr,]$error
with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
simData[simData$trial==tr,]$error <- as.numeric(with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est)))
simData$error <- rep(NA, nrow(simData))
simData[simData$trial==tr,"error"]
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
simData[simData$trial==tr+1,"rot.est"]
rot.est_upd <- function(A, B, rot.est_n, e.targ_n) { A*rot.est_n + B*e.targ_n }
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
library(ggplot2)
library(cowplot)
ggplot(aes(trial, rot.est), data = simData) + geom_line()
ggplot(aes(trial, rot.est), data = simData) + geom_point()
simData
B = .002
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line()
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
B = .000002
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
# target error
e.targ_n <- function(rot_n, rot.est_n) { rot_n - rot.est_n }
# update rule
rot.est_upd <- function(A, B, rot.est_n, e.targ_n) { A*rot.est_n + B*e.targ_n }
# memory term (retention)
A = 1
# learning rate / sensitivity to error
B = .000002
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
A = 1
# learning rate / sensitivity to error
B = .2
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
B = 2
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
# memory term (retention)
A = 1
# learning rate / sensitivity to error
B = .8
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
A = .5
# learning rate / sensitivity to error
B = .8
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
rm(list=ls())
# target error
e.targ_n <- function(rot_n, rot.est_n) { rot_n - rot.est_n }
# update rule
rot.est_upd <- function(A, B, rot.est_n, e.targ_n) { A*rot.est_n + B*e.targ_n }
# memory term (retention)
A = 1
# learning rate / sensitivity to error
B = .02
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
rot.est
ggplot(aes(trial, error), data = simData) + geom_line() + geom_point()
# target error
e.targ_n <- function(rot_n, rot.est_n) { rot_n - rot.est_n }
# update rule
rot.est_upd <- function(A, B, rot.est_n, e.targ_n) { A*rot.est_n + B*e.targ_n }
# memory term (retention)
A = 1
# learning rate / sensitivity to error
B = .02
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, error), data = simData) + geom_line() + geom_point()
head(simData)
B = .0002
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, error), data = simData) + geom_line() + geom_point()
B = .4
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = 45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, error), data = simData) + geom_line() + geom_point()
# memory term (retention)
A = 1
# learning rate / sensitivity to error
B = .02
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = -45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot_n, rot.est))
}
}
ggplot(aes(trial, error), data = simData) + geom_line() + geom_point()
head(simData)
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
# memory term (retention)
A = 1
# learning rate / sensitivity to error
B = .02
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = -45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.targ_n(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), rot.est_upd(A, B, rot.est, error))
}
}
head(simData)
ggplot(aes(trial, error), data = simData) + geom_line() + geom_point()
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
--> cas
e.aim_n <- function(rot_n, rot.est_n, s.actual_n, s.desired_n) { (rot_n - rot.est_n) + (s.actual_n - s.desired_n) }
# Error definitions
# error based on distance from feedback to target (target error)
e.target <- function(rot_n, rot.est_n) { rot_n - rot.est_n }
# error based on distance from feedback to aimed position
e.aiming <- function(rot_n, rot.est_n, s.actual_n, s.desired_n) { (rot_n - rot.est_n) + (s.actual_n - s.desired_n) }
# feed-forward model update rule
ffmod.update <- function(A, B, rot.est_n, e.targ_n) { A*rot.est_n + B*e.targ_n }
# memory term (retention)
A = 1
# learning rate / sensitivity to error
B = .02
## ----------- Simulate data ----------- ##
# baseline
baseline <- expand.grid(trial = 1:120,
rot_n = 0)
# adaptation
adaptation <- expand.grid(trial = 120+(1:320),
rot_n = -45)
# washout
washout <- expand.grid(trial = 120+320+(1:120),
rot_n = 0)
# complete dataset
simData <- rbind(baseline, adaptation, washout)
# initial internal state is set to zero
simData$rot.est <- c(0, rep(NA, nrow(simData)-1))
# initialize error
simData$error <- rep(NA, nrow(simData))
# compute trial-by-trial update
for(tr in 1:nrow(simData))
{
if(tr < nrow(simData))
{
# current error
simData[simData$trial==tr,"error"] <- with(subset(simData, trial==tr), e.target(rot_n, rot.est))
# model update
simData[simData$trial==tr+1,"rot.est"] <- with(subset(simData, trial==tr), ffmod.update(A, B, rot.est, error))
}
}
head(simData)
ggplot(aes(trial, error), data = simData) + geom_line() + geom_point()
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
ggplot(aes(trial, error), data = simData) + geom_line() + geom_point()
ggplot(aes(trial, rot.est), data = simData) + geom_line() + geom_point()
