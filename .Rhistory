cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial
testTrial <- subset(testData, trialN == tN)
#### signals analysis
# set start
start <- c(0,0,0)
# set end (depends on trial's conditions)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
# refresh rate
refreshRate <- testTrial$refreshRate
# prepare signal dataset
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
# analysis: repair, filter, translate, rotate
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
#### merge back
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
#### hit time
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
#### crop the inbound portion of trajectory
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
#### onset time
# set velocity threshold
onsetZ_threshold <- .5
# find onset frame
onsetFrame <- kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold)
# crop trajectory before onset
trialData <- subset(trialData, frameN >= onsetFrame)
#### space normalization
# euclidean distance of thumb to its final position
trialData$curDist <- sqrt((trialData$cursorX - tail(trialData$cursorX, 1))^2 +
(trialData$cursorY - tail(trialData$cursorY, 1))^2 +
(trialData$cursorZ - tail(trialData$cursorZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$curDistB <- with(trialData, cut(curDist, breaks = binN, labels = F))
#### initialize time to zero
trialData$time <- trialData$time - trialData$startTime
#### append trajectory data to main trajectory dataset
trajData <- rbind(trajData, trialData)
#### extract parameters
extractData <- kin.extract.parameters(trialData, "cursor")
#### append reach parameters to main dataset
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
tN
cat("---- trial #", tN, ". ----\n\n", sep = "")
testTrial <- subset(testData, trialN == tN)
start <- c(0,0,0)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
refreshRate <- testTrial$refreshRate
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
onsetZ_threshold <- .5
onsetFrame <- kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold)
trialData <- subset(trialData, frameN >= onsetFrame)
trialData
test <- subset(expData, subjName == "cc1_isolum")
test
testData <- data.check(test)
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
cat("---- trial #", tN, ". ----\n\n", sep = "")
testTrial <- subset(testData, trialN == tN)
start <- c(0,0,0)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
refreshRate <- testTrial$refreshRate
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
onsetZ_threshold <- .5
onsetFrame <- kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold)
trialData$cursorZ
kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold)
onsetZ_threshold
ggplot(data = trialData) +
geom_point(aes(frameN, cursorZvel)) +
geom_hline(yintercept = -.1)
ggplot(data = trialData) +
geom_point(aes(cursorX, cursorZ, color = frameN)) +
geom_point(aes(x = 0, y = 8), size = 2, color = "red") +
coord_fixed()
test <- subset(expData, subjName == "cc1_isolum" & trialN == 1)
testData <- data.check(test)
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
for(tN in unique(testData$trialN))
{
# tN <- unique(testData$trialN)[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial
testTrial <- subset(testData, trialN == tN)
#### signals analysis
# set start
start <- c(0,0,0)
# set end (depends on trial's conditions)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
# refresh rate
refreshRate <- testTrial$refreshRate
# prepare signal dataset
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
# analysis: repair, filter, translate, rotate
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
#### merge back
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
#### hit time
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
#### crop the inbound portion of trajectory
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
ggplot(data = trialData) +
geom_point(aes(frameN, cursorZvel)) +
geom_hline(yintercept = -.1)
ggplot(data = trialData) +
geom_point(aes(cursorX, cursorZ, color = frameN)) +
geom_point(aes(x = 0, y = 8), size = 2, color = "red") +
coord_fixed()
#### onset time
# set velocity threshold
onsetZ_threshold <- .5
# find onset frame
onsetFrame <- kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold)
# crop trajectory before onset
trialData <- subset(trialData, frameN >= onsetFrame)
#### space normalization
# euclidean distance of thumb to its final position
trialData$curDist <- sqrt((trialData$cursorX - tail(trialData$cursorX, 1))^2 +
(trialData$cursorY - tail(trialData$cursorY, 1))^2 +
(trialData$cursorZ - tail(trialData$cursorZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$curDistB <- with(trialData, cut(curDist, breaks = binN, labels = F))
#### initialize time to zero
trialData$time <- trialData$time - trialData$startTime
#### append trajectory data to main trajectory dataset
trajData <- rbind(trajData, trialData)
#### extract parameters
extractData <- kin.extract.parameters(trialData, "cursor")
#### append reach parameters to main dataset
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
test <- subset(expData, subjName == "cc1_isolum" & trialN == 2)
testData <- data.check(test)
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
for(tN in unique(testData$trialN))
{
# tN <- unique(testData$trialN)[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial
testTrial <- subset(testData, trialN == tN)
#### signals analysis
# set start
start <- c(0,0,0)
# set end (depends on trial's conditions)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
# refresh rate
refreshRate <- testTrial$refreshRate
# prepare signal dataset
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
# analysis: repair, filter, translate, rotate
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
#### merge back
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
#### hit time
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
#### crop the inbound portion of trajectory
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
ggplot(data = trialData) +
geom_point(aes(frameN, cursorZvel)) +
geom_hline(yintercept = -.1)
ggplot(data = trialData) +
geom_point(aes(cursorX, cursorZ, color = frameN)) +
geom_point(aes(x = 0, y = 8), size = 2, color = "red") +
coord_fixed()
#### onset time
# set velocity threshold
onsetZ_threshold <- .5
# find onset frame
onsetFrame <- kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold)
# crop trajectory before onset
trialData <- subset(trialData, frameN >= onsetFrame)
#### space normalization
# euclidean distance of thumb to its final position
trialData$curDist <- sqrt((trialData$cursorX - tail(trialData$cursorX, 1))^2 +
(trialData$cursorY - tail(trialData$cursorY, 1))^2 +
(trialData$cursorZ - tail(trialData$cursorZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$curDistB <- with(trialData, cut(curDist, breaks = binN, labels = F))
#### initialize time to zero
trialData$time <- trialData$time - trialData$startTime
#### append trajectory data to main trajectory dataset
trajData <- rbind(trajData, trialData)
#### extract parameters
extractData <- kin.extract.parameters(trialData, "cursor")
#### append reach parameters to main dataset
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
test <- subset(expData, subjName == "cc1_isolum")
testData <- data.check(test)
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
tN <- unique(testData$trialN)[1]
tN
cat("---- trial #", tN, ". ----\n\n", sep = "")
testTrial <- subset(testData, trialN == tN)
start <- c(0,0,0)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
refreshRate <- testTrial$refreshRate
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
ggplot(data = trialData) +
geom_point(aes(cursorX, cursorZ, color = frameN)) +
geom_point(aes(x = 0, y = 8), size = 2, color = "red") +
coord_fixed()
ggplot(data = trialData) +
geom_point(aes(frameN, cursorZvel)) +
geom_hline(yintercept = -.1)
ggplot(data = trialData) +
geom_point(aes(cursorX, cursorZ, color = isPointerOut)) +
geom_point(aes(x = 0, y = 8), size = 2, color = "red") +
coord_fixed()
tN <- unique(testData$trialN)[2]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial
testTrial <- subset(testData, trialN == tN)
#### signals analysis
# set start
start <- c(0,0,0)
# set end (depends on trial's conditions)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
# refresh rate
refreshRate <- testTrial$refreshRate
# prepare signal dataset
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
# analysis: repair, filter, translate, rotate
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
#### merge back
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
#### hit time
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
ggplot(data = trialData) +
geom_point(aes(cursorX, cursorZ, color = isPointerOut)) +
geom_point(aes(x = 0, y = 8), size = 2, color = "red") +
coord_fixed()
tN <- unique(testData$trialN)[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial
testTrial <- subset(testData, trialN == tN)
#### signals analysis
# set start
start <- c(0,0,0)
# set end (depends on trial's conditions)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
# refresh rate
refreshRate <- testTrial$refreshRate
# prepare signal dataset
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
# analysis: repair, filter, translate, rotate
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
#### merge back
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
#### hit time
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
onsetZ_threshold <- .5
onsetFrame <- kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold)
kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold)
tryCatch(kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold))
onsetFrame <- tryCatch(kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold), error = function(e) {NA})
onsetFrame
onsetFrame <- tryCatch(kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold), error = function(e) {0})
onsetFrame
trialData <- subset(trialData, frameN >= onsetFrame)
trialData
onsetFrame <- tryCatch(kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold), error = function(e) {Inf})
trialData <- subset(trialData, frameN >= onsetFrame)
trialData
trialData$curDist <- sqrt((trialData$cursorX - tail(trialData$cursorX, 1))^2 +
(trialData$cursorY - tail(trialData$cursorY, 1))^2 +
(trialData$cursorZ - tail(trialData$cursorZ, 1))^2
)
binN <- 100
trialData$curDistB <- with(trialData, cut(curDist, breaks = binN, labels = F))
unique(testData$trialN)[1:2]
test <- subset(expData, subjName == "cc1_isolum")
testData <- data.check(test)
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
for(tN in unique(testData$trialN)[1:2])
{
# tN <- unique(testData$trialN)[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial
testTrial <- subset(testData, trialN == tN)
#### signals analysis
# set start
start <- c(0,0,0)
# set end (depends on trial's conditions)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
# refresh rate
refreshRate <- testTrial$refreshRate
# prepare signal dataset
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
# analysis: repair, filter, translate, rotate
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
#### merge back
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
#### hit time
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
#### crop the inbound portion of trajectory
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
#### onset time
# set velocity threshold
onsetZ_threshold <- .5
# find onset frame
onsetFrame <- tryCatch(kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold), error = function(e) {NA})
if(is.na)
next
# crop trajectory before onset
trialData <- subset(trialData, frameN >= onsetFrame)
#### space normalization
# euclidean distance of thumb to its final position
trialData$curDist <- sqrt((trialData$cursorX - tail(trialData$cursorX, 1))^2 +
(trialData$cursorY - tail(trialData$cursorY, 1))^2 +
(trialData$cursorZ - tail(trialData$cursorZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$curDistB <- with(trialData, cut(curDist, breaks = binN, labels = F))
#### initialize time to zero
trialData$time <- trialData$time - trialData$startTime
#### append trajectory data to main trajectory dataset
trajData <- rbind(trajData, trialData)
#### extract parameters
extractData <- kin.extract.parameters(trialData, "cursor")
#### append reach parameters to main dataset
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
#### Analysis loop ####
for(tN in unique(testData$trialN)[1:2])
{
# tN <- unique(testData$trialN)[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial
testTrial <- subset(testData, trialN == tN)
#### signals analysis
# set start
start <- c(0,0,0)
# set end (depends on trial's conditions)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
# refresh rate
refreshRate <- testTrial$refreshRate
# prepare signal dataset
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
# analysis: repair, filter, translate, rotate
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
#### merge back
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
#### hit time
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
#### crop the inbound portion of trajectory
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
#### onset time
# set velocity threshold
onsetZ_threshold <- .5
# find onset frame
onsetFrame <- tryCatch(kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold), error = function(e) {NA})
if(is.na(onsetFrame))
next
# crop trajectory before onset
trialData <- subset(trialData, frameN >= onsetFrame)
#### space normalization
# euclidean distance of thumb to its final position
trialData$curDist <- sqrt((trialData$cursorX - tail(trialData$cursorX, 1))^2 +
(trialData$cursorY - tail(trialData$cursorY, 1))^2 +
(trialData$cursorZ - tail(trialData$cursorZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$curDistB <- with(trialData, cut(curDist, breaks = binN, labels = F))
#### initialize time to zero
trialData$time <- trialData$time - trialData$startTime
#### append trajectory data to main trajectory dataset
trajData <- rbind(trajData, trialData)
#### extract parameters
extractData <- kin.extract.parameters(trialData, "cursor")
#### append reach parameters to main dataset
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
head(reach_paramData)
head(timeinfoData)
for(tN in unique(testData$trialN))
{
# tN <- unique(testData$trialN)[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial
testTrial <- subset(testData, trialN == tN)
#### signals analysis
# set start
start <- c(0,0,0)
# set end (depends on trial's conditions)
end <- with(testTrial, c(8*sin(unique(targetAngle)*pi/180), 0, 8*cos(unique(targetAngle)*pi/180)))
# refresh rate
refreshRate <- testTrial$refreshRate
# prepare signal dataset
cursor.signal <- as.data.frame(cbind("cursorPosX" = testTrial$cursorPosX, "cursorPosY" = rnorm(length(testTrial$cursorPosX), 0, .0001), "cursorPosZ" = testTrial$cursorPosY))
# analysis: repair, filter, translate, rotate
cursorData <- kin.signal.analysis(cursor.signal, "cursor", start, end, deltaTime = 1)
#### merge back
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time",
"clamp","isPointerOut","phase","condition","startTime","movTime")], cursorData)
#### hit time
trialData$hitTime <- with(subset(trialData, isPointerOut), time[1])
#### crop the inbound portion of trajectory
trialData <- subset(trialData, !isPointerOut & time <= hitTime)
#### onset time
# set velocity threshold
onsetZ_threshold <- .5
# find onset frame
onsetFrame <- tryCatch(kin.find.onsetTime(trialData$cursorZ, onsetZ_threshold), error = function(e) {NA})
if(is.na(onsetFrame))
next
# crop trajectory before onset
trialData <- subset(trialData, frameN >= onsetFrame)
#### space normalization
# euclidean distance of thumb to its final position
trialData$curDist <- sqrt((trialData$cursorX - tail(trialData$cursorX, 1))^2 +
(trialData$cursorY - tail(trialData$cursorY, 1))^2 +
(trialData$cursorZ - tail(trialData$cursorZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$curDistB <- with(trialData, cut(curDist, breaks = binN, labels = F))
#### initialize time to zero
trialData$time <- trialData$time - trialData$startTime
#### append trajectory data to main trajectory dataset
trajData <- rbind(trajData, trialData)
#### extract parameters
extractData <- kin.extract.parameters(trialData, "cursor")
#### append reach parameters to main dataset
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
head(timeinfoData)
library(kinesis)
