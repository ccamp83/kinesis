(onsetFrame <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold))
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .3
# find onset frame ----
(onsetFrame <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold))
kin.find.onsetTime
trialData$handVel
x <- trialData$handVel
onset_threshold
onset_threshold <- onsetVel_threshold
x.flag.vel <- ifelse(x > onset_threshold, 1, 0)
x.flag.vel
onset_threshold
onset_threshold <- .02
x.flag.vel <- ifelse(x > onset_threshold, 1, 0)
x.flag.vel
onset_threshold <- .1
x.flag.vel <- ifelse(x > onset_threshold, 1, 0)
x.flag.vel
onset_threshold <- .02
x
ggplot(mapping = aes(frameN, handVel), data = trialData) + geom_point() + coord_cartesian(xlim = c(0,100))
ggplot(mapping = aes(frameN, handX), data = trialData) + geom_point() + coord_cartesian(xlim = c(0,100))
trialData$frameN
x.flag.vel <- ifelse(x > onset_threshold, 1, 0)
# cumulative count of NAs
x.flag.vel.count <- x.flag.vel * unlist(lapply(rle(x.flag.vel)$lengths, seq_len))
onset_threshold <- .02
x.flag.vel <- ifelse(x > onset_threshold, 1, 0)
# cumulative count of NAs
x.flag.vel.count <- x.flag.vel * unlist(lapply(rle(x.flag.vel)$lengths, seq_len))
x.flag.vel.count
# gather all missing data in groups
onset.check <- data.frame(
frames = which(x > onset_threshold)
,
count = x.flag.vel.count[x.flag.vel.count!=0]
)
onset.check$group <- with(onset.check, c(0, cumsum(diff(count) != 1)))
onset.check
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .2
# find onset frame ----
(onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold))
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
# review data
ggplot(mapping = aes(frameN, handVel), data = trialData) + geom_point()
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
(onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold))
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
# review data
ggplot(mapping = aes(frameN, handVel), data = trialData) + geom_point()
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
(onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold))
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
# review data
ggplot(mapping = aes(frameN, handVel), data = trialData) + geom_point()
# merge all
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time")], signal)
#### crop the inbound portion of trajectory ----
# set velocity threshold ----
returnVel_threshold <- -.05
# crop
trialData <- subset(trialData, handZvel > returnVel_threshold)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
(onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold))
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
# review data
ggplot(mapping = aes(frameN, handVel), data = trialData) + geom_point()
#### main dataset
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
#### Analysis loop ####
trialsList <- unique(testData$trialN)
badTrials <- NULL
for(tN in trialsList)
{
# tN <- trialsList[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial ----
testTrial.backup <- subset(testData, trialN == tN)
columnsToExclude <- paste0("hand",c("X","Y","Z"),"raw")
testTrial <- testTrial.backup[, !names(testTrial.backup)%in%columnsToExclude]
testTrial$handXraw <- testTrial$handX
testTrial$handZraw <- testTrial$handZ
#### signals analysis ----
# set start x y z coordinates ----
start <- c(0,0,0)
# set end (depends on trial's conditions) ----
end <- c(0,0,.1)
# refresh rate ----
refreshRate <- 1/85
# prepare signals datasets
hand.signal <- testTrial[,c("handXraw","handZraw")]
# analysis: repair, filter, translate, rotate ----
handData <- kin.signal.analysis(hand.signal, "hand", start, end, deltaTime = refreshRate, f = F)
#### merge back ----
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time","handXraw","handZraw")], handData)
if(mean(trialData$handVel)>0.001)
{
#### crop the inbound portion of trajectory ----
# set velocity threshold ----
returnVel_threshold <- -.05
# crop
trialData <- subset(trialData, handZvel > returnVel_threshold)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold)
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
#### offset time ----
# resultant vectors
trialData$handVelAcc.res <- with(trialData, sqrt(handVel^2 + handAcc^2))
# find offest time
offsetFrame <- with(trialData, frameN[match(kin.min(handVelAcc.res), handVelAcc.res)])
trialData$offsetTime <- trialData$time[trialData$frameN == offsetFrame]
# crop out trajectory after offset
trialData <- subset(trialData, frameN <= offsetFrame)
#### space normalization ----
# euclidean distance of hand to its final position
trialData$handDist <- sqrt((trialData$handX - tail(trialData$handX, 1))^2 +
(trialData$handY - tail(trialData$handY, 1))^2 +
(trialData$handZ - tail(trialData$handZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$handDistB <- with(trialData, cut(handDist, breaks = binN, labels = F))
#### append trajectory data to main trajectory dataset ----
trajData <- rbind(trajData, trialData)
#### extract parameters ----
extractData <- kin.extract.parameters(trialData, c("hand"), grasp = F)
#### append reach parameters to main dataset ----
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset ----
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
} else
{
badTrials <- c(badTrials, tN)
}
}
?try
?tryCatch
tryCatch(
testAnalysis <- function()
{
#### crop the inbound portion of trajectory ----
# set velocity threshold ----
returnVel_threshold <- -.05
# crop
trialData <- subset(trialData, handZvel > returnVel_threshold)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold)
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
#### offset time ----
# resultant vectors
trialData$handVelAcc.res <- with(trialData, sqrt(handVel^2 + handAcc^2))
# find offest time
offsetFrame <- with(trialData, frameN[match(kin.min(handVelAcc.res), handVelAcc.res)])
trialData$offsetTime <- trialData$time[trialData$frameN == offsetFrame]
# crop out trajectory after offset
trialData <- subset(trialData, frameN <= offsetFrame)
#### space normalization ----
# euclidean distance of hand to its final position
trialData$handDist <- sqrt((trialData$handX - tail(trialData$handX, 1))^2 +
(trialData$handY - tail(trialData$handY, 1))^2 +
(trialData$handZ - tail(trialData$handZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$handDistB <- with(trialData, cut(handDist, breaks = binN, labels = F))
#### append trajectory data to main trajectory dataset ----
trajData <- rbind(trajData, trialData)
#### extract parameters ----
extractData <- kin.extract.parameters(trialData, c("hand"), grasp = F)
#### append reach parameters to main dataset ----
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset ----
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
, error = function(e)
{
badTrials <- c(badTrials, tN)
})
badTrials
#### main dataset
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
#### Analysis loop ####
trialsList <- unique(testData$trialN)
badTrials <- NULL
for(tN in trialsList)
{
# tN <- trialsList[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial ----
testTrial.backup <- subset(testData, trialN == tN)
columnsToExclude <- paste0("hand",c("X","Y","Z"),"raw")
testTrial <- testTrial.backup[, !names(testTrial.backup)%in%columnsToExclude]
testTrial$handXraw <- testTrial$handX
testTrial$handZraw <- testTrial$handZ
#### signals analysis ----
# set start x y z coordinates ----
start <- c(0,0,0)
# set end (depends on trial's conditions) ----
end <- c(0,0,.1)
# refresh rate ----
refreshRate <- 1/85
# prepare signals datasets
hand.signal <- testTrial[,c("handXraw","handZraw")]
# analysis: repair, filter, translate, rotate ----
handData <- kin.signal.analysis(hand.signal, "hand", start, end, deltaTime = refreshRate, f = F)
#### merge back ----
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time","handXraw","handZraw")], handData)
tryCatch(
testAnalysis <- function()
{
#### crop the inbound portion of trajectory ----
# set velocity threshold ----
returnVel_threshold <- -.05
# crop
trialData <- subset(trialData, handZvel > returnVel_threshold)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold)
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
#### offset time ----
# resultant vectors
trialData$handVelAcc.res <- with(trialData, sqrt(handVel^2 + handAcc^2))
# find offest time
offsetFrame <- with(trialData, frameN[match(kin.min(handVelAcc.res), handVelAcc.res)])
trialData$offsetTime <- trialData$time[trialData$frameN == offsetFrame]
# crop out trajectory after offset
trialData <- subset(trialData, frameN <= offsetFrame)
#### space normalization ----
# euclidean distance of hand to its final position
trialData$handDist <- sqrt((trialData$handX - tail(trialData$handX, 1))^2 +
(trialData$handY - tail(trialData$handY, 1))^2 +
(trialData$handZ - tail(trialData$handZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$handDistB <- with(trialData, cut(handDist, breaks = binN, labels = F))
#### append trajectory data to main trajectory dataset ----
trajData <- rbind(trajData, trialData)
#### extract parameters ----
extractData <- kin.extract.parameters(trialData, c("hand"), grasp = F)
#### append reach parameters to main dataset ----
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset ----
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
}
, error = function(e)
{
badTrials <- c(badTrials, tN)
})
}
badTrials
head(reach_paramData)
tryCatch( testAnalysis(), error = function(e){ badTrials <- c(badTrials, tN)} )
timeinfoData
tryCatch( {testAnalysis()}, error = function(e){ badTrials <- c(badTrials, tN)} )
head(reach_paramData)
head(timeinfoData)
badTrials
#### main dataset
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
#### Analysis loop ####
trialsList <- unique(testData$trialN)
badTrials <- NULL
for(tN in trialsList)
{
# tN <- trialsList[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial ----
testTrial.backup <- subset(testData, trialN == tN)
columnsToExclude <- paste0("hand",c("X","Y","Z"),"raw")
testTrial <- testTrial.backup[, !names(testTrial.backup)%in%columnsToExclude]
testTrial$handXraw <- testTrial$handX
testTrial$handZraw <- testTrial$handZ
#### signals analysis ----
# set start x y z coordinates ----
start <- c(0,0,0)
# set end (depends on trial's conditions) ----
end <- c(0,0,.1)
# refresh rate ----
refreshRate <- 1/85
# prepare signals datasets
hand.signal <- testTrial[,c("handXraw","handZraw")]
# analysis: repair, filter, translate, rotate ----
handData <- kin.signal.analysis(hand.signal, "hand", start, end, deltaTime = refreshRate, f = F)
#### merge back ----
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time","handXraw","handZraw")], handData)
if(mean(trialData$handVel)>0.001)
{
#### crop the inbound portion of trajectory ----
# set velocity threshold ----
returnVel_threshold <- -.05
# crop
trialData <- subset(trialData, handZvel > returnVel_threshold)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold)
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
#### offset time ----
# resultant vectors
trialData$handVelAcc.res <- with(trialData, sqrt(handVel^2 + handAcc^2))
# find offest time
offsetFrame <- with(trialData, frameN[match(kin.min(handVelAcc.res), handVelAcc.res)])
trialData$offsetTime <- trialData$time[trialData$frameN == offsetFrame]
# crop out trajectory after offset
trialData <- subset(trialData, frameN <= offsetFrame)
#### space normalization ----
# euclidean distance of hand to its final position
trialData$handDist <- sqrt((trialData$handX - tail(trialData$handX, 1))^2 +
(trialData$handY - tail(trialData$handY, 1))^2 +
(trialData$handZ - tail(trialData$handZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$handDistB <- with(trialData, cut(handDist, breaks = binN, labels = F))
#### append trajectory data to main trajectory dataset ----
trajData <- rbind(trajData, trialData)
#### extract parameters ----
extractData <- kin.extract.parameters(trialData, c("hand"), grasp = F)
#### append reach parameters to main dataset ----
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset ----
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
} else
{
badTrials <- c(badTrials, tN)
}
}
head(reach_paramData)
head(timeinfoData)
badTrials
#### Results ####
ggplot(data = trajData) +
geom_point(aes(handX, handZ)) +
coord_fixed()
ggplot(data = trajData) +
geom_point(aes(handXraw, handZraw)) +
coord_fixed()
ggplot(data = trajData) +
geom_point(aes(-handDist, handZ), color = "red")
ggplot(aes(trialN, movTime), data = timeinfoData) + geom_point()
ggplot(aes(trialN, MdeviationX, color = signal), data = reach_paramData) + geom_point() + geom_smooth(method = lm)
ggplot(aes(trialN, MdeviationY, color = signal), data = reach_paramData) + geom_point() + geom_smooth(method = lm)
library(kinesis)
library(cowplot)
options(scipen = 1, digits = 3)
#### Prepare the dataset ####
# five columns are expected
get("dataCols", kinesis_parameters)
# user can set them
kin.setDataCols(deltaTime = "refreshRate")
get("dataCols", kinesis_parameters)
# Fix dataset
testData <- data.check(reachData)
#### main dataset
trajData <- NULL
reach_paramData <- NULL
timeinfoData <- NULL
#### Analysis loop ####
trialsList <- unique(testData$trialN)
badTrials <- NULL
for(tN in trialsList)
{
# tN <- trialsList[1]
cat("---- trial #", tN, ". ----\n\n", sep = "")
#### select trial ----
testTrial.backup <- subset(testData, trialN == tN)
columnsToExclude <- paste0("hand",c("X","Y","Z"),"raw")
testTrial <- testTrial.backup[, !names(testTrial.backup)%in%columnsToExclude]
testTrial$handXraw <- testTrial$handX
testTrial$handZraw <- testTrial$handZ
#### signals analysis ----
# set start x y z coordinates ----
start <- c(0,0,0)
# set end (depends on trial's conditions) ----
end <- c(0,0,.1)
# refresh rate ----
refreshRate <- 1/85
# prepare signals datasets
hand.signal <- testTrial[,c("handXraw","handZraw")]
# analysis: repair, filter, translate, rotate ----
handData <- kin.signal.analysis(hand.signal, "hand", start, end, deltaTime = refreshRate, f = F)
#### merge back ----
trialData <- cbind(testTrial[c("subjName","trialN","frameN","refreshRate","time","handXraw","handZraw")], handData)
if(mean(trialData$handVel)>0.001)
{
#### crop the inbound portion of trajectory ----
# set velocity threshold ----
returnVel_threshold <- -.05
# crop
trialData <- subset(trialData, handZvel > returnVel_threshold)
#### onset time ----
# set velocity threshold ----
onsetVel_threshold <- .02
# find onset frame ----
onsetFramePos <- kin.find.onsetTime(trialData$handVel, onsetVel_threshold)
# crop trajectory before onset ----
trialData <- subset(trialData, frameN >= frameN[onsetFramePos])
#### offset time ----
# resultant vectors
trialData$handVelAcc.res <- with(trialData, sqrt(handVel^2 + handAcc^2))
# find offest time
offsetFrame <- with(trialData, frameN[match(kin.min(handVelAcc.res), handVelAcc.res)])
trialData$offsetTime <- trialData$time[trialData$frameN == offsetFrame]
# crop out trajectory after offset
trialData <- subset(trialData, frameN <= offsetFrame)
#### space normalization ----
# euclidean distance of hand to its final position
trialData$handDist <- sqrt((trialData$handX - tail(trialData$handX, 1))^2 +
(trialData$handY - tail(trialData$handY, 1))^2 +
(trialData$handZ - tail(trialData$handZ, 1))^2
)
# bin thuDist
binN <- 100
trialData$handDistB <- with(trialData, cut(handDist, breaks = binN, labels = F))
#### append trajectory data to main trajectory dataset ----
trajData <- rbind(trajData, trialData)
#### extract parameters ----
extractData <- kin.extract.parameters(trialData, c("hand"), grasp = F)
#### append reach parameters to main dataset ----
trialParams.r <- extractData$reach_parameters
trialParams.r$trialN <- tN
reach_paramData <- rbind(reach_paramData, trialParams.r)
#### append time info to main dataset ----
timeinfoParams <- extractData$time_info
timeinfoParams$trialN <- tN
timeinfoData <- rbind(timeinfoData, timeinfoParams)
} else
{
badTrials <- c(badTrials, tN)
}
}
options(scipen = 1, digits = 3)
library(kinesis)
library(cowplot)
install.packages("devtool")
install.packages("devtools")
devtools::install_github("ccamp83/mu")
devtools::install_github("ccamp83/mu")
devtools::install_github("ccamp83/mu")
library(mu)
devtools::install_github("ccamp83/mu")
devtools::install_github("ccamp83/mu")
install.packages("Rcpp")
devtools::install_github("ccamp83/mu")
devtools::install_github("ccamp83/mu")
install.packages("Rcpp")
options(scipen = 1, digits = 3)
library(kinesis)
library(mu)
libraries()
libraries(update = T)
libraries(update = T)
devtools::install_github("ccamp83/kinesis")
devtools::install_github("ccamp83/kinesis", force = T)
devtools::install_github("ccamp83/kinesis", repos = "http://cran/us.r-project/org")
options(repos=structure(c(CRAN="https://cran.cnr.berkeley.edu/")))
devtools::install_github("ccamp83/kinesis", force = T)
library(kinesis)
library(kinesis)
